Microsoft (R) Macro Assembler Version 11.00.61030.0	    03/26/14 19:07:02
lab9.asm						     Page 1 - 1


				; Juan Pedraza
				; CSCI 112 - Lab 9
				; Program wil ask for a positive integer N
				; it will then call the fibonacci function that
				; is stored in another file which will compute
				; the Nth fibonacci number. Then dispay the result.

				.586
				.MODEL FLAT
				INCLUDE io.h
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 
				.STACK 4096

 00000000			.DATA
 00000000 00000000		N1			DWORD	? ;store the N value
 00000004 00000000		Nth			DWORD	? ;store result, Nth value

 00000008 45 6E 74 65 72	askN		BYTE	"Enter a positive N integer:",0
	   20 61 20 70 6F
	   73 69 74 69 76
	   65 20 4E 20 69
	   6E 74 65 67 65
	   72 3A 00
 00000024 52 65 73 75 6C	result		BYTE	"Result:",0
	   74 3A 00
 0000002C  000000FA [		finalStr	BYTE	250 DUP(?),0
	    00
	   ] 00
 00000127 46 69 62 6F 28	answer1		BYTE	"Fibo(",0 ;5 char
	   00
 0000012D 29 20 3D 20 00	answer2		BYTE	") = ",0 ;4 char
 00000132  0000000B [		tmpStr		BYTE	11 DUP(?),0
	    00
	   ] 00
 0000013E  0000000B [		tmp2		BYTE	11 DUP(?),0
	    00
	   ] 00

				EXTERN fibo:PROC

				; this macro will swap the values in 2 double words
				swap MACRO dword1, dword2
					push eax ; will use as temp
					mov eax, dword1
					xchg eax, dword2 ;swap using xchg. xchg does not work with 2 memorys
					mov dword1, eax
					pop eax ;restore original value of eax
				ENDM

 00000000			.CODE
 00000000			_MainProc PROC

 00000000			getN:	input askN, tmpStr, 11
						atod tmpStr
 0000002D  83 F8 00				cmp eax, 0
 00000030  7E CE				jle getN ;if value is not positive ask for input again.
 00000032  A3 00000000 R			mov N1, eax
 00000037  50					push eax ;push Nth index onto the stack
 00000038  E8 00000000 E			call fibo ;answer should be in eax
 0000003D  83 C4 04				add esp, 4 ;only sent 1 argument (4 bytes)
 00000040  A3 00000004 R			mov Nth, eax

						;combine result into one final string
 00000045  8D 3D 0000002C R			lea edi, finalStr
 0000004B  8D 35 00000127 R			lea esi, answer1
 00000051  B9 00000005				mov ecx, 5
 00000056  FC					cld
 00000057  F3/ A4				rep movsb
 00000059  8D 3D 00000031 R			lea edi, finalStr[5]
						dtoa tmp2, N1
 0000007B  8D 35 0000013E R			lea esi, tmp2
 00000081  B9 0000000B				mov ecx, 11
 00000086  FC					cld
 00000087  F3/ A4				rep movsb
 00000089  8D 3D 0000003C R			lea edi, finalStr[16]
 0000008F  8D 35 0000012D R			lea esi, answer2
 00000095  B9 00000004				mov ecx, 4
 0000009A  FC					cld
 0000009B  F3/ A4				rep movsb
 0000009D  8D 3D 00000040 R			lea edi, finalStr[20]
						dtoa tmp2, Nth
 000000BF  8D 35 0000013E R			lea esi, tmp2
 000000C5  B9 0000000B				mov ecx, 11
 000000CA  FC					cld
 000000CB  F3/ A4				rep movsb

						output result, finalStr

						;test out macro with debugger
						swap N1, Nth

 000000F8  B8 00000000				mov     eax, 0
 000000FD  C3					ret
 000000FE			_MainProc ENDP

				END

Microsoft (R) Macro Assembler Version 11.00.61030.0	    03/26/14 19:07:02
lab9.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
swap . . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000014A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000FE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000FE Public
  getN . . . . . . . . . . . . .	L Near	 00000000 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
N1 . . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
Nth  . . . . . . . . . . . . . .	DWord	 00000004 _DATA	
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
answer1  . . . . . . . . . . . .	Byte	 00000127 _DATA	
answer2  . . . . . . . . . . . .	Byte	 0000012D _DATA	
askN . . . . . . . . . . . . . .	Byte	 00000008 _DATA	
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
fibo . . . . . . . . . . . . . .	L Near	 00000000 FLAT	External
finalStr . . . . . . . . . . . .	Byte	 0000002C _DATA	
result . . . . . . . . . . . . .	Byte	 00000024 _DATA	
tmp2 . . . . . . . . . . . . . .	Byte	 0000013E _DATA	
tmpStr . . . . . . . . . . . . .	Byte	 00000132 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
