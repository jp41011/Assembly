Microsoft (R) Macro Assembler Version 11.00.61030.0	    02/12/14 13:20:36
lab4.asm						     Page 1 - 1


				; Juan Pedraza
				; csci 126 lab4 2/12/14
				; Delcare two 5 element DW arrays
				; add 2 to the first array
				; sub 2 from the second array
				; exchange in reverse order between arrays
				; see how using ebx vs eax changes the 

				.586
				.MODEL FLAT

				INCLUDE io.h
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				.STACK 4096

 00000000			.DATA
 00000000 00000021		array1	DWORD	21H, 22H, 23H, 24H, 25H ;1st array
	   00000022
	   00000023
	   00000024
	   00000025
 00000014 00000031		array2	DWORD	31H, 32H, 33H, 34H, 35H	;2nd array
	   00000032
	   00000033
	   00000034
	   00000035

 00000028  0000000A [		elem	BYTE	10 DUP(?),0	; to print number in array
	    00
	   ] 00
 00000033 00000000		count	DWORD	0			;counter for array

 00000037 41 72 72 61 79	one1	BYTE	"Array1 element1 is:",0
	   31 20 65 6C 65
	   6D 65 6E 74 31
	   20 69 73 3A 00
 0000004B 41 72 72 61 79	one2	BYTE	"Array1 element2 is:",0
	   31 20 65 6C 65
	   6D 65 6E 74 32
	   20 69 73 3A 00
 0000005F 41 72 72 61 79	one3	BYTE	"Array1 element3 is:",0
	   31 20 65 6C 65
	   6D 65 6E 74 33
	   20 69 73 3A 00
 00000073 41 72 72 61 79	one4	BYTE	"Array1 element4 is:",0
	   31 20 65 6C 65
	   6D 65 6E 74 34
	   20 69 73 3A 00
 00000087 41 72 72 61 79	one5	BYTE	"Array1 element5 is:",0
	   31 20 65 6C 65
	   6D 65 6E 74 35
	   20 69 73 3A 00

 0000009B 41 72 72 61 79	two1	BYTE	"Array2 element1 is",0	;for second array
	   32 20 65 6C 65
	   6D 65 6E 74 31
	   20 69 73 00
 000000AE 41 72 72 61 79	two2	BYTE	"Array2 element2 is",0
	   32 20 65 6C 65
	   6D 65 6E 74 32
	   20 69 73 00
 000000C1 41 72 72 61 79	two3	BYTE	"Array2 element3 is",0
	   32 20 65 6C 65
	   6D 65 6E 74 33
	   20 69 73 00
 000000D4 41 72 72 61 79	two4	BYTE	"Array2 element4 is",0
	   32 20 65 6C 65
	   6D 65 6E 74 34
	   20 69 73 00
 000000E7 41 72 72 61 79	two5	BYTE	"Array2 element5 is",0
	   32 20 65 6C 65
	   6D 65 6E 74 35
	   20 69 73 00

 00000000			.CODE
 00000000			_MainProc PROC

					;add 2 to each element of array 1
 00000000  8B 1D 00000000 R		mov ebx, array1+0
 00000006  43				inc ebx
 00000007  43				inc ebx
 00000008  89 1D 00000000 R		mov array1+0, ebx

 0000000E  8B 1D 00000004 R		mov ebx, array1+4
 00000014  43				inc ebx
 00000015  43				inc ebx
 00000016  89 1D 00000004 R		mov array1+4, ebx

 0000001C  8B 1D 00000008 R		mov ebx, array1+8
 00000022  43				inc ebx
 00000023  43				inc ebx
 00000024  89 1D 00000008 R		mov array1+8, ebx

 0000002A  8B 1D 0000000C R		mov ebx, array1+12
 00000030  43				inc ebx
 00000031  43				inc ebx
 00000032  89 1D 0000000C R		mov array1+12, ebx

 00000038  8B 1D 00000010 R		mov ebx, array1+16
 0000003E  43				inc ebx
 0000003F  43				inc ebx
 00000040  89 1D 00000010 R		mov array1+16, ebx

					; subtract 2 from each element of array2
 00000046  8B 1D 00000014 R		mov ebx, array2+0
 0000004C  4B				dec ebx
 0000004D  4B				dec ebx
 0000004E  89 1D 00000014 R		mov array2+0, ebx

 00000054  8B 1D 00000018 R		mov ebx, array2+4
 0000005A  4B				dec ebx
 0000005B  4B				dec ebx
 0000005C  89 1D 00000018 R		mov array2+4, ebx

 00000062  8B 1D 0000001C R		mov ebx, array2+8
 00000068  4B				dec ebx
 00000069  4B				dec ebx
 0000006A  89 1D 0000001C R		mov array2+8, ebx
					
 00000070  8B 1D 00000020 R		mov ebx, array2+12
 00000076  4B				dec ebx
 00000077  4B				dec ebx
 00000078  89 1D 00000020 R		mov array2+12, ebx

 0000007E  8B 1D 00000024 R		mov ebx, array2+16
 00000084  4B				dec ebx
 00000085  4B				dec ebx
 00000086  89 1D 00000024 R		mov array2+16, ebx

					;swap in reverse order
 0000008C  8B 1D 00000000 R		mov ebx, array1+0	;1st array1
 00000092  87 1D 00000024 R		xchg ebx, array2+16	;5th array2
 00000098  89 1D 00000000 R		mov array1+0, ebx
					
 0000009E  8B 1D 00000004 R		mov ebx, array1+4
 000000A4  87 1D 00000020 R		xchg ebx, array2+12
 000000AA  89 1D 00000004 R		mov array1+4, ebx
					
 000000B0  8B 1D 00000008 R		mov ebx, array1+8
 000000B6  87 1D 0000001C R		xchg ebx, array2+8
 000000BC  89 1D 00000008 R		mov array1+8, ebx

 000000C2  8B 1D 0000000C R		mov ebx, array1+12
 000000C8  87 1D 00000018 R		xchg ebx, array2+4
 000000CE  89 1D 0000000C R		mov array1+12, ebx

 000000D4  8B 1D 00000010 R		mov ebx, array1+16
 000000DA  87 1D 00000014 R		xchg ebx, array2+0
 000000E0  89 1D 00000010 R		mov array1+16, ebx

					;print arrays
					dtoa	elem, array1+0
					output	one1, elem
					dtoa	elem, array1+4
					output	one2, elem
					dtoa	elem, array1+8
					output	one3, elem
					dtoa	elem, array1+12
					output	one4, elem
					dtoa	elem, array1+16
					output	one5, elem

					dtoa	elem, array2+0
					output	two1, elem
					dtoa	elem, array2+4
					output	two2, elem
					dtoa	elem, array2+8
					output	two3, elem

					dtoa	elem, array2+12
					output	two4, elem
					dtoa	elem, array2+16
					output	two5, elem

					; THE END
 000002F8  B8 00000000			mov eax, 0 ;clean up and ready to exit
 000002FD  C3				ret
 000002FE			_MainProc ENDP
				END
Microsoft (R) Macro Assembler Version 11.00.61030.0	    02/12/14 13:20:36
lab4.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000FA Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002FE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000002FE Public


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
array1 . . . . . . . . . . . . .	DWord	 00000000 _DATA	
array2 . . . . . . . . . . . . .	DWord	 00000014 _DATA	
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
count  . . . . . . . . . . . . .	DWord	 00000033 _DATA	
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
elem . . . . . . . . . . . . . .	Byte	 00000028 _DATA	
one1 . . . . . . . . . . . . . .	Byte	 00000037 _DATA	
one2 . . . . . . . . . . . . . .	Byte	 0000004B _DATA	
one3 . . . . . . . . . . . . . .	Byte	 0000005F _DATA	
one4 . . . . . . . . . . . . . .	Byte	 00000073 _DATA	
one5 . . . . . . . . . . . . . .	Byte	 00000087 _DATA	
two1 . . . . . . . . . . . . . .	Byte	 0000009B _DATA	
two2 . . . . . . . . . . . . . .	Byte	 000000AE _DATA	
two3 . . . . . . . . . . . . . .	Byte	 000000C1 _DATA	
two4 . . . . . . . . . . . . . .	Byte	 000000D4 _DATA	
two5 . . . . . . . . . . . . . .	Byte	 000000E7 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
